plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.minecraft'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://libraries.minecraft.net/' }
}

dependencies {
    // Netty for networking
    implementation 'io.netty:netty-all:4.1.100.Final'
    
    // Protocol Buffers
    implementation 'com.google.protobuf:protobuf-java:3.24.4'
    
    // JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    
    // Database
    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    implementation 'mysql:mysql-connector-java:8.0.33'
    
    // Compression
    implementation 'org.apache.commons:commons-compress:1.24.0'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

application {
    mainClass = 'com.minecraft.server.MinecraftServer'
}

shadowJar {
    archiveBaseName.set('minecraft-server')
    archiveClassifier.set('')
    archiveVersion.set(project.version.toString())
    
    manifest {
        attributes(
            'Main-Class': 'com.minecraft.server.MinecraftServer',
            'Implementation-Title': 'Minecraft Server',
            'Implementation-Version': project.version
        )
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// Custom task to run the server
task runServer(type: JavaExec) {
    group = 'application'
    description = 'Runs the Minecraft server'
    mainClass = 'com.minecraft.server.MinecraftServer'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = projectDir
    
    // Pass command line arguments
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

// Task to generate protocol classes
task generateProtocol {
    group = 'build'
    description = 'Generate protocol classes from .proto files'
    
    doLast {
        // This would use protoc to generate Java classes from .proto files
        println 'Protocol generation would happen here'
    }
}

// Task to create server directory structure
task createServerStructure {
    group = 'build'
    description = 'Create server directory structure'
    
    doLast {
        def dirs = [
            'worlds',
            'plugins',
            'logs',
            'backups',
            'config'
        ]
        
        dirs.each { dir ->
            mkdir dir
        }
        
        println 'Server directory structure created'
    }
}

build.dependsOn shadowJar 